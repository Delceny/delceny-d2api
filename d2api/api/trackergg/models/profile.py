# generated by datamodel-codegen:
#   filename:  profile.json
#   timestamp: 2022-01-29T13:37:34+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class PlatformInfo(BaseModel):
    platformSlug: str
    platformUserId: Any
    platformUserHandle: str
    platformUserIdentifier: str
    avatarUrl: str
    additionalParameters: Any


class UserInfo(BaseModel):
    userId: Any
    isPremium: bool
    isVerified: bool
    isInfluencer: bool
    isPartner: bool
    countryCode: Any
    customAvatarUrl: Any
    customHeroUrl: Any
    socialAccounts: List
    pageviews: int
    isSuspicious: Any


class LastUpdated(BaseModel):
    value: str
    displayValue: str


class Metadata(BaseModel):
    lastUpdated: LastUpdated
    membershipType: int
    membershipId: str
    currentSeason: int
    playsTrials: bool
    playingTrials: bool


class Attributes(BaseModel):
    group: Optional[str] = None
    playlist: Optional[str] = None


class Metadata1(BaseModel):
    name: str
    imageUrl: Optional[str] = None


class SiteScore(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AbilityKills(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Assists(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AssistsPga(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TotalKillDistance(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Kills(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class KillsPga(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class AvgKillDistance(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class SecondsPlayed(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Deaths(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AverageLifeSpan(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Score(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ScorePga(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class AvgScorePerKill(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AvgScorePerLife(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class BestSingleGameKills(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class BestSingleGameScore(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class DominationKills(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Kd(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Kad(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectivesCompleted(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Suicides(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Wl(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class LongestKillSpree(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class LongestSingleLife(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class MostPrecisionKills(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class CombatRating(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class PrecisionKills(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ActivitiesEntered(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ActivitiesWon(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ZonesCaptured(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ZonesNeutralized(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ResurrectionsPerformed(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ResurrectionsReceived(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class DefensiveKills(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OffensiveKills(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsDropped(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsGathered(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class RelicsCaptured(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsDroppedPerGame(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsGatheredPerGame(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class RelicsCapturedPerGame(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class MinutesPlayedTotal(BaseModel):
    rank: Optional[int]
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class SuperKills(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Efficiency(BaseModel):
    rank: Optional[int]
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TrialsFlawless(BaseModel):
    rank: int
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class GloryRating(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class GloryLevel(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ValorRating(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ValorLevel(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class InfamyRating(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class InfamyLevel(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Metadata2(BaseModel):
    key: str


class Winloss(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: Any
    category: Any
    metadata: Metadata2
    value: Any
    displayValue: str
    displayType: str


class Metadata3(BaseModel):
    label: str
    imageUrl: str
    progressToNextLevel: int
    nextStep: str


class Rank(BaseModel):
    rank: int
    percentile: int
    displayName: str
    displayCategory: Any
    category: str
    metadata: Metadata3
    value: int
    displayValue: str
    displayType: str


class ActivitiesCleared(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class PublicEventsCompleted(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class GrenadeKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class MeleeKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class MilestonesCompleted(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Metadata4(BaseModel):
    iconUrl: str
    rankColor: str
    rankName: str


class Elo(BaseModel):
    rank: int
    percentile: float
    displayName: str
    displayCategory: Any
    category: str
    metadata: Metadata4
    value: int
    displayValue: str
    displayType: str


class Stats(BaseModel):
    siteScore: Optional[SiteScore] = None
    abilityKills: Optional[AbilityKills] = None
    assists: Optional[Assists] = None
    assistsPga: Optional[AssistsPga] = None
    totalKillDistance: Optional[TotalKillDistance] = None
    kills: Kills
    killsPga: Optional[KillsPga] = None
    avgKillDistance: Optional[AvgKillDistance] = None
    secondsPlayed: SecondsPlayed
    deaths: Deaths
    averageLifeSpan: Optional[AverageLifeSpan] = None
    score: Optional[Score] = None
    scorePga: Optional[ScorePga] = None
    avgScorePerKill: Optional[AvgScorePerKill] = None
    avgScorePerLife: Optional[AvgScorePerLife] = None
    bestSingleGameKills: Optional[BestSingleGameKills] = None
    bestSingleGameScore: Optional[BestSingleGameScore] = None
    dominationKills: Optional[DominationKills] = None
    kd: Kd
    kad: Optional[Kad] = None
    objectivesCompleted: Optional[ObjectivesCompleted] = None
    suicides: Suicides
    wl: Optional[Wl] = None
    longestKillSpree: Optional[LongestKillSpree] = None
    longestSingleLife: Optional[LongestSingleLife] = None
    mostPrecisionKills: Optional[MostPrecisionKills] = None
    combatRating: Optional[CombatRating] = None
    precisionKills: Optional[PrecisionKills] = None
    activitiesEntered: ActivitiesEntered
    activitiesWon: Optional[ActivitiesWon] = None
    zonesCaptured: Optional[ZonesCaptured] = None
    zonesNeutralized: Optional[ZonesNeutralized] = None
    resurrectionsPerformed: Optional[ResurrectionsPerformed] = None
    resurrectionsReceived: Optional[ResurrectionsReceived] = None
    defensiveKills: Optional[DefensiveKills] = None
    offensiveKills: Optional[OffensiveKills] = None
    orbsDropped: Optional[OrbsDropped] = None
    orbsGathered: Optional[OrbsGathered] = None
    relicsCaptured: Optional[RelicsCaptured] = None
    orbsDroppedPerGame: Optional[OrbsDroppedPerGame] = None
    orbsGatheredPerGame: Optional[OrbsGatheredPerGame] = None
    relicsCapturedPerGame: Optional[RelicsCapturedPerGame] = None
    minutesPlayedTotal: Optional[MinutesPlayedTotal] = None
    superKills: SuperKills
    efficiency: Optional[Efficiency] = None
    trialsFlawless: Optional[TrialsFlawless] = None
    gloryRating: Optional[GloryRating] = None
    gloryLevel: Optional[GloryLevel] = None
    valorRating: Optional[ValorRating] = None
    valorLevel: Optional[ValorLevel] = None
    infamyRating: Optional[InfamyRating] = None
    infamyLevel: Optional[InfamyLevel] = None
    winloss: Optional[Winloss] = None
    rank: Optional[Rank] = None
    activitiesCleared: Optional[ActivitiesCleared] = None
    publicEventsCompleted: Optional[PublicEventsCompleted] = None
    grenadeKills: Optional[GrenadeKills] = None
    meleeKills: Optional[MeleeKills] = None
    milestonesCompleted: Optional[MilestonesCompleted] = None
    elo: Optional[Elo] = None


class Segment(BaseModel):
    type: str
    attributes: Attributes
    metadata: Metadata1
    expiryDate: str
    stats: Stats


class Profile(BaseModel):
    platformInfo: PlatformInfo
    userInfo: UserInfo
    metadata: Metadata
    segments: List[Segment]
    availableSegments: List
    expiryDate: str
