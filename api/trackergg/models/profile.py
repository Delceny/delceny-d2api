# generated by datamodel-codegen:
#   filename:  profile.json
#   timestamp: 2022-01-29T10:33:08+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class PlatformInfo(BaseModel):
    platformSlug: str
    platformUserId: Any
    platformUserHandle: str
    platformUserIdentifier: str
    avatarUrl: str
    additionalParameters: Any


class UserInfo(BaseModel):
    userId: Any
    isPremium: bool
    isVerified: bool
    isInfluencer: bool
    isPartner: bool
    countryCode: Any
    customAvatarUrl: Any
    customHeroUrl: Any
    socialAccounts: List
    pageviews: int
    isSuspicious: Any


class LastUpdated(BaseModel):
    value: Any
    displayValue: Any


class Metadata(BaseModel):
    lastUpdated: LastUpdated
    membershipType: int
    membershipId: str
    currentSeason: int
    playsTrials: bool
    playingTrials: bool


class Attributes(BaseModel):
    group: Optional[str] = None
    playlist: Optional[str] = None


class Metadata1(BaseModel):
    name: str
    imageUrl: Optional[str] = None


class SiteScore(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AbilityKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Assists(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AssistsPga(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TotalKillDistance(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Kills(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class KillsPga(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class AvgKillDistance(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class SecondsPlayed(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Deaths(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AverageLifeSpan(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Score(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ScorePga(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class AvgScorePerKill(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class AvgScorePerLife(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class BestSingleGameKills(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class BestSingleGameScore(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class DominationKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Kd(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class Kad(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class ObjectivesCompleted(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Suicides(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Wl(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class LongestKillSpree(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class LongestSingleLife(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class MostPrecisionKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class CombatRating(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class PrecisionKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ActivitiesEntered(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ActivitiesWon(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ZonesCaptured(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ZonesNeutralized(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ResurrectionsPerformed(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ResurrectionsReceived(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class DefensiveKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OffensiveKills(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsDropped(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsGathered(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class RelicsCaptured(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsDroppedPerGame(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class OrbsGatheredPerGame(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class RelicsCapturedPerGame(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class MinutesPlayedTotal(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class SuperKills(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Efficiency(BaseModel):
    rank: Any
    percentile: Optional[int]
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: float
    displayValue: str
    displayType: str


class TrialsFlawless(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class GloryRating(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class GloryLevel(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ValorRating(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class ValorLevel(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class InfamyRating(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class InfamyLevel(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: str
    category: str
    metadata: Dict[str, Any]
    value: int
    displayValue: str
    displayType: str


class Metadata2(BaseModel):
    key: str


class Winloss(BaseModel):
    rank: Any
    percentile: Any
    displayName: str
    displayCategory: Any
    category: Any
    metadata: Metadata2
    value: Any
    displayValue: str
    displayType: str


class Metadata3(BaseModel):
    label: str
    imageUrl: str
    progressToNextLevel: int
    nextStep: str


class Rank(BaseModel):
    rank: Any
    percentile: int
    displayName: str
    displayCategory: Any
    category: str
    metadata: Metadata3
    value: int
    displayValue: str
    displayType: str


class Metadata4(BaseModel):
    iconUrl: str
    rankColor: str
    rankName: str


class Elo(BaseModel):
    rank: int
    percentile: float
    displayName: str
    displayCategory: Any
    category: str
    metadata: Metadata4
    value: int
    displayValue: str
    displayType: str


class Stats(BaseModel):
    siteScore: SiteScore
    abilityKills: AbilityKills
    assists: Assists
    assistsPga: AssistsPga
    totalKillDistance: TotalKillDistance
    kills: Kills
    killsPga: KillsPga
    avgKillDistance: AvgKillDistance
    secondsPlayed: SecondsPlayed
    deaths: Deaths
    averageLifeSpan: AverageLifeSpan
    score: Score
    scorePga: ScorePga
    avgScorePerKill: AvgScorePerKill
    avgScorePerLife: AvgScorePerLife
    bestSingleGameKills: BestSingleGameKills
    bestSingleGameScore: BestSingleGameScore
    dominationKills: DominationKills
    kd: Kd
    kad: Kad
    objectivesCompleted: ObjectivesCompleted
    suicides: Suicides
    wl: Wl
    longestKillSpree: LongestKillSpree
    longestSingleLife: LongestSingleLife
    mostPrecisionKills: MostPrecisionKills
    combatRating: CombatRating
    precisionKills: PrecisionKills
    activitiesEntered: ActivitiesEntered
    activitiesWon: ActivitiesWon
    zonesCaptured: ZonesCaptured
    zonesNeutralized: ZonesNeutralized
    resurrectionsPerformed: ResurrectionsPerformed
    resurrectionsReceived: ResurrectionsReceived
    defensiveKills: DefensiveKills
    offensiveKills: OffensiveKills
    orbsDropped: OrbsDropped
    orbsGathered: OrbsGathered
    relicsCaptured: RelicsCaptured
    orbsDroppedPerGame: OrbsDroppedPerGame
    orbsGatheredPerGame: OrbsGatheredPerGame
    relicsCapturedPerGame: RelicsCapturedPerGame
    minutesPlayedTotal: MinutesPlayedTotal
    superKills: SuperKills
    efficiency: Efficiency
    trialsFlawless: Optional[TrialsFlawless] = None
    gloryRating: Optional[GloryRating] = None
    gloryLevel: Optional[GloryLevel] = None
    valorRating: Optional[ValorRating] = None
    valorLevel: Optional[ValorLevel] = None
    infamyRating: Optional[InfamyRating] = None
    infamyLevel: Optional[InfamyLevel] = None
    winloss: Optional[Winloss] = None
    rank: Optional[Rank] = None
    elo: Optional[Elo] = None


class Segment(BaseModel):
    type: str
    attributes: Attributes
    metadata: Metadata1
    expiryDate: str
    stats: Stats


class Profile(BaseModel):
    platformInfo: PlatformInfo
    userInfo: UserInfo
    metadata: Metadata
    segments: List[Segment]
    availableSegments: List
    expiryDate: str
